/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/menu_screen/menuViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

menuViewBase::menuViewBase() :
    buttonCallback(this, &menuViewBase::buttonCallbackHandler),
    updateItemCallback(this, &menuViewBase::updateItemCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setPosition(0, 0, 800, 480);
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 1, 35));

    menu_container.setXY(0, 0);
    menu_container.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_HIGHLIGHT_ID));
    menu_container.setPageIndicatorXY(378, 10);
    menu_container.setSwipeCutoff(100);
    menu_container.setEndSwipeElasticWidth(50);

    start_stop.setWidth(800);
    start_stop.setHeight(480);

    Close_Lid.setXY(209, 319);
    Close_Lid.setBitmaps(touchgfx::Bitmap(BITMAP_CLOSE_LID_ID), touchgfx::Bitmap(BITMAP_CLOSE_LID_PUSH_ID));
    Close_Lid.setLabelText(touchgfx::TypedText(T_SINGLEUSEID25));
    Close_Lid.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(0, 1, 35));
    Close_Lid.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Close_Lid.setAction(buttonCallback);
    start_stop.add(Close_Lid);

    Open_Lid.setXY(209, 319);
    Open_Lid.setBitmaps(touchgfx::Bitmap(BITMAP_OPEN_LID_ID), touchgfx::Bitmap(BITMAP_OPEN_LID_PUSH_ID));
    Open_Lid.setLabelText(touchgfx::TypedText(T_SINGLEUSEID23));
    Open_Lid.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Open_Lid.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Open_Lid.setAction(buttonCallback);
    start_stop.add(Open_Lid);

    Stop_Reflow.setXY(209, 224);
    Stop_Reflow.setBitmaps(touchgfx::Bitmap(BITMAP_STOP_REFLOW_ID), touchgfx::Bitmap(BITMAP_STOP_REFLOW_PUSH_ID));
    Stop_Reflow.setLabelText(touchgfx::TypedText(T_SINGLEUSEID24));
    Stop_Reflow.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Stop_Reflow.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Stop_Reflow.setAction(buttonCallback);
    start_stop.add(Stop_Reflow);

    Start_Reflow.setXY(209, 224);
    Start_Reflow.setBitmaps(touchgfx::Bitmap(BITMAP_START_REFLOW_ID), touchgfx::Bitmap(BITMAP_START_REFLOW_PUSH_ID));
    Start_Reflow.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
    Start_Reflow.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Start_Reflow.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Start_Reflow.setAction(buttonCallback);
    start_stop.add(Start_Reflow);

    vapor_phase_one.setXY(232, 97);
    vapor_phase_one.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    vapor_phase_one.setLinespacing(0);
    vapor_phase_one.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
    start_stop.add(vapor_phase_one);
    menu_container.add(start_stop);

    graphs.setWidth(800);
    graphs.setHeight(480);

    x_axis_naming.setXY(348, 443);
    x_axis_naming.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    x_axis_naming.setLinespacing(0);
    x_axis_naming.setAlpha(150);
    x_axis_naming.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
    graphs.add(x_axis_naming);

    y_axis_naming.setPosition(7, 237, 20, 17);
    y_axis_naming.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    y_axis_naming.setLinespacing(0);
    y_axis_naming.setAlpha(150);
    y_axis_namingBuffer[0] = 0;
    y_axis_naming.setWildcard(y_axis_namingBuffer);
    y_axis_naming.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
    graphs.add(y_axis_naming);

    galden_tmp.setXY(594, 41);
    galden_tmp.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    galden_tmp.setLinespacing(0);
    galden_tmp.setAlpha(150);
    touchgfx::Unicode::snprintf(galden_tmpBuffer1, GALDEN_TMPBUFFER1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID34).getText());
    galden_tmp.setWildcard1(galden_tmpBuffer1);
    galden_tmpBuffer2[0] = 0;
    galden_tmp.setWildcard2(galden_tmpBuffer2);
    galden_tmp.resizeToCurrentText();
    galden_tmp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
    graphs.add(galden_tmp);

    galden.setXY(549, 31);
    galden.setBitmap(touchgfx::Bitmap(BITMAP_DROP_ID));
    galden.setAlpha(150);
    graphs.add(galden);

    dynamicGraph_soll.setScale(1);
    dynamicGraph_soll.setGraphRangeX(0, 249);
    dynamicGraph_soll.setPosition(35, 89, 733, 347);
    dynamicGraph_soll.setGraphAreaMargin(15, 25, 15, 20);
    dynamicGraph_soll.setGraphAreaPadding(0, 10, 0, 12);
    dynamicGraph_soll.setGraphRangeY(0, 250);

    dynamicGraph_sollLine1.setScale(1);
    dynamicGraph_sollLine1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 45, 45));
    dynamicGraph_sollLine1.setPainter(dynamicGraph_sollLine1Painter);
    dynamicGraph_sollLine1.setLineWidth(2);
    dynamicGraph_soll.addGraphElement(dynamicGraph_sollLine1);
    graphs.add(dynamicGraph_soll);

    dynamicGraph_ist.setScale(1);
    dynamicGraph_ist.setGraphRangeX(0, 249);
    dynamicGraph_ist.setPosition(35, 89, 733, 347);
    dynamicGraph_ist.setGraphAreaMargin(15, 25, 15, 20);
    dynamicGraph_ist.setGraphAreaPadding(0, 10, 0, 12);
    dynamicGraph_ist.setGraphRangeY(0, 250);

    dynamicGraph_istMajorXAxisGrid.setScale(1);
    dynamicGraph_istMajorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
    dynamicGraph_istMajorXAxisGrid.setInterval(20);
    dynamicGraph_istMajorXAxisGrid.setLineWidth(1);
    dynamicGraph_istMajorXAxisGrid.setAlpha(100);
    dynamicGraph_ist.addGraphElement(dynamicGraph_istMajorXAxisGrid);

    dynamicGraph_istMajorYAxisGrid.setScale(1);
    dynamicGraph_istMajorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
    dynamicGraph_istMajorYAxisGrid.setInterval(50);
    dynamicGraph_istMajorYAxisGrid.setLineWidth(1);
    dynamicGraph_istMajorYAxisGrid.setAlpha(100);
    dynamicGraph_ist.addGraphElement(dynamicGraph_istMajorYAxisGrid);

    dynamicGraph_istMajorXAxisLabel.setScale(1);
    dynamicGraph_istMajorXAxisLabel.setInterval(30);
    dynamicGraph_istMajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
    dynamicGraph_istMajorXAxisLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
    dynamicGraph_ist.addBottomElement(dynamicGraph_istMajorXAxisLabel);

    dynamicGraph_istMajorYAxisLabel.setScale(1);
    dynamicGraph_istMajorYAxisLabel.setInterval(50);
    dynamicGraph_istMajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
    dynamicGraph_istMajorYAxisLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
    dynamicGraph_ist.addLeftElement(dynamicGraph_istMajorYAxisLabel);

    dynamicGraph_istLine1.setScale(1);
    dynamicGraph_istLine1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(20, 151, 197));
    dynamicGraph_istLine1.setPainter(dynamicGraph_istLine1Painter);
    dynamicGraph_istLine1.setLineWidth(2);
    dynamicGraph_ist.addGraphElement(dynamicGraph_istLine1);

    dynamicGraph_istVerticalFrontline.setColor(touchgfx::Color::getColorFrom24BitRGB(20, 151, 197));
    dynamicGraph_istVerticalFrontline.setGapLineWidth(1);
    dynamicGraph_istVerticalFrontline.setAlpha(154);
    dynamicGraph_ist.addGraphElement(dynamicGraph_istVerticalFrontline);
    graphs.add(dynamicGraph_ist);

    watersystem_tmp.setXY(173, 41);
    watersystem_tmp.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    watersystem_tmp.setLinespacing(0);
    watersystem_tmp.setAlpha(150);
    touchgfx::Unicode::snprintf(watersystem_tmpBuffer1, WATERSYSTEM_TMPBUFFER1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
    watersystem_tmp.setWildcard1(watersystem_tmpBuffer1);
    watersystem_tmpBuffer2[0] = 0;
    watersystem_tmp.setWildcard2(watersystem_tmpBuffer2);
    watersystem_tmp.resizeToCurrentText();
    watersystem_tmp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
    graphs.add(watersystem_tmp);

    watersystem.setXY(126, 31);
    watersystem.setBitmaps(BITMAP_ARROW1_ID, BITMAP_ARROW2_ID);
    watersystem.setUpdateTicksInterval(30);
    watersystem.setAlpha(150);
    watersystem.startAnimation(false, true, true);
    graphs.add(watersystem);

    abortedProfileBackground.setPosition(68, 102, 689, 306);
    abortedProfileBackground.setVisible(false);
    abortedProfileBackground.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 1, 35));
    abortedProfileBackground.setAlpha(164);
    graphs.add(abortedProfileBackground);

    abortedProfileText.setXY(347, 239);
    abortedProfileText.setVisible(false);
    abortedProfileText.setColor(touchgfx::Color::getColorFrom24BitRGB(189, 189, 189));
    abortedProfileText.setLinespacing(0);
    abortedProfileText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
    graphs.add(abortedProfileText);
    menu_container.add(graphs);

    options.setWidth(800);
    options.setHeight(480);

    options_solder_profile_wheel_indicator.setPosition(20, 344, 80, 80);
    options_solder_profile_wheel_indicator.setCenter(40, 40);
    options_solder_profile_wheel_indicator.setRadius(7);
    options_solder_profile_wheel_indicator.setLineWidth(0);
    options_solder_profile_wheel_indicator.setArc(0, 360);
    options_solder_profile_wheel_indicatorPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(189, 189, 189));
    options_solder_profile_wheel_indicator.setPainter(options_solder_profile_wheel_indicatorPainter);
    options.add(options_solder_profile_wheel_indicator);

    options_solder_button_set.setXY(593, 354);
    options_solder_button_set.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_SET_ID), touchgfx::Bitmap(BITMAP_BUTTON_SET_PUSH_ID));
    options_solder_button_set.setAction(buttonCallback);
    options.add(options_solder_button_set);

    options_solder_profile_wheel.setPosition(79, 300, 500, 178);
    options_solder_profile_wheel.setHorizontal(false);
    options_solder_profile_wheel.setCircular(false);
    options_solder_profile_wheel.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    options_solder_profile_wheel.setSwipeAcceleration(10);
    options_solder_profile_wheel.setDragAcceleration(10);
    options_solder_profile_wheel.setNumberOfItems(20);
    options_solder_profile_wheel.setSelectedItemOffset(63);
    options_solder_profile_wheel.setDrawableSize(50, 0);
    options_solder_profile_wheel.setDrawables(options_solder_profile_wheelListItems, updateItemCallback);
    options_solder_profile_wheel.animateToItem(0, 0);
    options.add(options_solder_profile_wheel);

    options_solder_profile_whell_overlay_bottom.setPosition(79, 408, 500, 70);
    options_solder_profile_whell_overlay_bottom.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 1, 35));
    options_solder_profile_whell_overlay_bottom.setAlpha(150);
    options.add(options_solder_profile_whell_overlay_bottom);

    options_solder_profile_whell_overlay_top.setPosition(79, 300, 500, 70);
    options_solder_profile_whell_overlay_top.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 1, 35));
    options_solder_profile_whell_overlay_top.setAlpha(150);
    options.add(options_solder_profile_whell_overlay_top);

    options_solder_profile_label.setPosition(35, 264, 214, 30);
    options_solder_profile_label.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_solder_profile_label.setLinespacing(0);
    options_solder_profile_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID29));
    options.add(options_solder_profile_label);

    options_openlid_button_high.setXY(593, 185);
    options_openlid_button_high.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_FAST_ID), touchgfx::Bitmap(BITMAP_BUTTON_FAST_PUSHED_ID));
    options_openlid_button_high.setAction(buttonCallback);
    options.add(options_openlid_button_high);

    options_openlid_button_medium.setXY(461, 186);
    options_openlid_button_medium.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_STANDARD_ID), touchgfx::Bitmap(BITMAP_BUTTON_STANDARD_PUSHED_ID));
    options_openlid_button_medium.setAction(buttonCallback);
    options.add(options_openlid_button_medium);

    options_openlid_button_low.setXY(327, 186);
    options_openlid_button_low.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_ECO_ID), touchgfx::Bitmap(BITMAP_BUTTON_ECO_PUSHED_ID));
    options_openlid_button_low.setAction(buttonCallback);
    options.add(options_openlid_button_low);

    lid_temp_label.setXY(37, 201);
    lid_temp_label.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lid_temp_label.setLinespacing(0);
    lid_temp_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
    options.add(lid_temp_label);

    options_sd_card_button_mount.setXY(543, 107);
    options_sd_card_button_mount.setVisible(false);
    options_sd_card_button_mount.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_MOUNT_MEDIUM_ID), touchgfx::Bitmap(BITMAP_BUTTON_MOUNT_PUSH_MEDIUM_ID));
    options_sd_card_button_mount.setLabelText(touchgfx::TypedText(T_SINGLEUSEID54));
    options_sd_card_button_mount.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_sd_card_button_mount.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_sd_card_button_mount.setAction(buttonCallback);
    options.add(options_sd_card_button_mount);

    options_sd_card_button.setXY(543, 107);
    options_sd_card_button.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EJECT_ID), touchgfx::Bitmap(BITMAP_BUTTON_EJECT_PUSH_ID));
    options_sd_card_button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID30));
    options_sd_card_button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_sd_card_button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_sd_card_button.setAction(buttonCallback);
    options.add(options_sd_card_button);

    options_sd_card_label.setXY(35, 122);
    options_sd_card_label.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_sd_card_label.setLinespacing(0);
    options_sd_card_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID27));
    options.add(options_sd_card_label);

    options_temp_unit_toggle.setXY(543, 32);
    options_temp_unit_toggle.setBitmaps(touchgfx::Bitmap(BITMAP_SWITCH_CELSIUS_MEDIUM_ID), touchgfx::Bitmap(BITMAP_SWITCH_FAHRENHEIT_MEDIUM_ID));
    options_temp_unit_toggle.setAction(buttonCallback);
    options.add(options_temp_unit_toggle);

    options_temp_unit_label.setXY(37, 46);
    options_temp_unit_label.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    options_temp_unit_label.setLinespacing(0);
    options_temp_unit_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));
    options.add(options_temp_unit_label);
    menu_container.add(options);
    menu_container.setSelectedPage(1);

    modalWindowInformation.setBackground(touchgfx::BitmapId(BITMAP_MODAL_BG_ID), 160, 104);
    modalWindowInformation.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowInformation.setShadeAlpha(132);
    modalWindowInformation.hide();

    modalWindowsInformationClose.setXY(142, 218);
    modalWindowsInformationClose.setBitmaps(touchgfx::Bitmap(BITMAP_CLOSE_SM_ID), touchgfx::Bitmap(BITMAP_CLOSE_SM_PUSH_ID));
    modalWindowsInformationClose.setAction(buttonCallback);
    modalWindowInformation.add(modalWindowsInformationClose);

    modalWindowInformationBody.setPosition(26, 61, 427, 144);
    modalWindowInformationBody.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowInformationBody.setLinespacing(0);
    modalWindowInformationBody.setTypedText(touchgfx::TypedText(T_SINGLEUSEID52));
    modalWindowInformation.add(modalWindowInformationBody);

    modalWindowInformationTitle.setPosition(26, 21, 427, 23);
    modalWindowInformationTitle.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowInformationTitle.setLinespacing(0);
    modalWindowInformationTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
    modalWindowInformation.add(modalWindowInformationTitle);

    modalWindowDecision.setBackground(touchgfx::BitmapId(BITMAP_MODAL_BG_ID), 160, 104);
    modalWindowDecision.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowDecision.setShadeAlpha(132);
    modalWindowDecision.hide();

    modalWindowDecisionYes.setXY(249, 209);
    modalWindowDecisionYes.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_YES_ID), touchgfx::Bitmap(BITMAP_BUTTON_YES_PUSHED_ID));
    modalWindowDecisionYes.setAction(buttonCallback);
    modalWindowDecision.add(modalWindowDecisionYes);

    modalWindowDecisionNo.setXY(64, 209);
    modalWindowDecisionNo.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_NO_ID), touchgfx::Bitmap(BITMAP_BUTTON_NO_PUSHED_ID));
    modalWindowDecisionNo.setAction(buttonCallback);
    modalWindowDecision.add(modalWindowDecisionNo);

    modalWindowDecisionBody.setPosition(26, 61, 427, 144);
    modalWindowDecisionBody.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowDecisionBody.setLinespacing(0);
    modalWindowDecisionBody.setTypedText(touchgfx::TypedText(T_SINGLEUSEID49));
    modalWindowDecision.add(modalWindowDecisionBody);

    modalWindowDecisionTitle.setPosition(26, 21, 427, 23);
    modalWindowDecisionTitle.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindowDecisionTitle.setLinespacing(0);
    modalWindowDecisionTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID48));
    modalWindowDecision.add(modalWindowDecisionTitle);

    add(__background);
    add(background);
    add(menu_container);
    add(modalWindowInformation);
    add(modalWindowDecision);
}

void menuViewBase::setupScreen()
{
    options_solder_profile_wheel.initialize();
    for (int i = 0; i < options_solder_profile_wheelListItems.getNumberOfDrawables(); i++)
    {
        options_solder_profile_wheelListItems[i].initialize();
    }
}

void menuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Close_Lid)
    {
        //CloseLidPush
        //When Close_Lid clicked call virtual function
        //Call CloseLidPush
        CloseLidPush();
    }
    else if (&src == &Open_Lid)
    {
        //OpenLidPush
        //When Open_Lid clicked call virtual function
        //Call OpenLidPush
        OpenLidPush();
    }
    else if (&src == &Stop_Reflow)
    {
        //StopReflowPush
        //When Stop_Reflow clicked call virtual function
        //Call StopReflowPush
        StopReflowPush();
    }
    else if (&src == &Start_Reflow)
    {
        //StartButtonPush
        //When Start_Reflow clicked call virtual function
        //Call StartButtonPush
        StartButtonPush();

        //startReflowClickHideAbortedBG
        //When Start_Reflow clicked hide abortedProfileBackground
        //Hide abortedProfileBackground
        abortedProfileBackground.setVisible(false);
        abortedProfileBackground.invalidate();

        //startReflowClickHideAbortedText
        //When Start_Reflow clicked hide abortedProfileText
        //Hide abortedProfileText
        abortedProfileText.setVisible(false);
        abortedProfileText.invalidate();
    }
    else if (&src == &options_solder_button_set)
    {
        //SetSolderProfile
        //When options_solder_button_set clicked call virtual function
        //Call SetSolderProfile
        SetSolderProfile();

        //solderButtonClickHideAbortedBG
        //When options_solder_button_set clicked hide abortedProfileBackground
        //Hide abortedProfileBackground
        abortedProfileBackground.setVisible(false);
        abortedProfileBackground.invalidate();

        //solderButtonClickHideAbortedText
        //When options_solder_button_set clicked hide abortedProfileText
        //Hide abortedProfileText
        abortedProfileText.setVisible(false);
        abortedProfileText.invalidate();
    }
    else if (&src == &options_openlid_button_high)
    {
        //FastButtonClicked
        //When options_openlid_button_high clicked call virtual function
        //Call btn_fast_open_temp_clicked
        btn_fast_open_temp_clicked();
    }
    else if (&src == &options_openlid_button_medium)
    {
        //StandardButtonClicked
        //When options_openlid_button_medium clicked call virtual function
        //Call btn_standard_open_temp_clicked
        btn_standard_open_temp_clicked();
    }
    else if (&src == &options_openlid_button_low)
    {
        //EcoButtonClicked
        //When options_openlid_button_low clicked call virtual function
        //Call btn_eco_open_temp_clicked
        btn_eco_open_temp_clicked();
    }
    else if (&src == &options_sd_card_button_mount)
    {
        //MountPushed
        //When options_sd_card_button_mount clicked call virtual function
        //Call MountPush
        MountPush();
    }
    else if (&src == &options_sd_card_button)
    {
        //EjectPush
        //When options_sd_card_button clicked call virtual function
        //Call EjectPush
        EjectPush();
    }
    else if (&src == &options_temp_unit_toggle)
    {
        //TempUnitToggled
        //When options_temp_unit_toggle clicked call virtual function
        //Call TempUnitToggled
        TempUnitToggled();
    }
    else if (&src == &modalWindowsInformationClose)
    {
        //ModalInformationClose
        //When modalWindowsInformationClose clicked call virtual function
        //Call ModalInformationClose
        ModalInformationClose();
    }
    else if (&src == &modalWindowDecisionYes)
    {
        //ModalDecisionYes
        //When modalWindowDecisionYes clicked call virtual function
        //Call ModalDecisionYes
        ModalDecisionYes();

        //decisionYesClickShowAbortedBG
        //When modalWindowDecisionYes clicked show abortedProfileBackground
        //Show abortedProfileBackground
        abortedProfileBackground.setVisible(true);
        abortedProfileBackground.invalidate();

        //decisionYesClickShowAbortedText
        //When modalWindowDecisionYes clicked show abortedProfileText
        //Show abortedProfileText
        abortedProfileText.setVisible(true);
        abortedProfileText.invalidate();

        //decisionYesClickSwitchScreen
        //When modalWindowDecisionYes clicked execute C++ code
        //Execute C++ code
        menu_container.setSelectedPage(1);
    }
    else if (&src == &modalWindowDecisionNo)
    {
        //ModalDecisionNo
        //When modalWindowDecisionNo clicked call virtual function
        //Call ModalDecisionNo
        ModalDecisionNo();
    }
}

void menuViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &options_solder_profile_wheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        custom_container_profile_select* cc = (custom_container_profile_select*)d;
        options_solder_profile_wheelUpdateItem(*cc, itemIndex);
    }
}
